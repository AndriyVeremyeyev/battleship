<<<<<<< HEAD
[{"/home/averemyeyev/andriy/projects/battleship/src/index.tsx":"1","/home/averemyeyev/andriy/projects/battleship/src/store.ts":"2","/home/averemyeyev/andriy/projects/battleship/src/App.tsx":"3","/home/averemyeyev/andriy/projects/battleship/src/reducers/index.ts":"4","/home/averemyeyev/andriy/projects/battleship/src/GameController.tsx":"5","/home/averemyeyev/andriy/projects/battleship/src/database.ts":"6","/home/averemyeyev/andriy/projects/battleship/src/Firewall.tsx":"7","/home/averemyeyev/andriy/projects/battleship/src/EnterName.tsx":"8","/home/averemyeyev/andriy/projects/battleship/src/Header.tsx":"9","/home/averemyeyev/andriy/projects/battleship/src/StartGame.tsx":"10","/home/averemyeyev/andriy/projects/battleship/src/Battle.tsx":"11","/home/averemyeyev/andriy/projects/battleship/src/strings.ts":"12","/home/averemyeyev/andriy/projects/battleship/src/actions/index.ts":"13","/home/averemyeyev/andriy/projects/battleship/src/Field.tsx":"14","/home/averemyeyev/andriy/projects/battleship/src/PlayAgain.tsx":"15","/home/averemyeyev/andriy/projects/battleship/src/Legend.tsx":"16"},{"size":509,"mtime":1621535294443,"results":"17","hashOfConfig":"18"},{"size":137,"mtime":1620679181954,"results":"19","hashOfConfig":"18"},{"size":423,"mtime":1621534255432,"results":"20","hashOfConfig":"18"},{"size":6533,"mtime":1621905384089,"results":"21","hashOfConfig":"18"},{"size":915,"mtime":1621535294443,"results":"22","hashOfConfig":"18"},{"size":1156,"mtime":1621458121680,"results":"23","hashOfConfig":"18"},{"size":365,"mtime":1621535294443,"results":"24","hashOfConfig":"18"},{"size":2275,"mtime":1621464429953,"results":"25","hashOfConfig":"18"},{"size":1343,"mtime":1621474706181,"results":"26","hashOfConfig":"18"},{"size":1689,"mtime":1621535294443,"results":"27","hashOfConfig":"18"},{"size":33945,"mtime":1621969641109,"results":"28","hashOfConfig":"18"},{"size":2013,"mtime":1621537512522,"results":"29","hashOfConfig":"18"},{"size":3114,"mtime":1621476346255,"results":"30","hashOfConfig":"18"},{"size":3790,"mtime":1621534255432,"results":"31","hashOfConfig":"18"},{"size":1812,"mtime":1621543555335,"results":"32","hashOfConfig":"18"},{"size":1154,"mtime":1621969630753,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"uu5yiq",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/averemyeyev/andriy/projects/battleship/src/index.tsx",[],["67","68"],"/home/averemyeyev/andriy/projects/battleship/src/store.ts",[],"/home/averemyeyev/andriy/projects/battleship/src/App.tsx",[],"/home/averemyeyev/andriy/projects/battleship/src/reducers/index.ts",[],"/home/averemyeyev/andriy/projects/battleship/src/GameController.tsx",[],"/home/averemyeyev/andriy/projects/battleship/src/database.ts",[],"/home/averemyeyev/andriy/projects/battleship/src/Firewall.tsx",[],"/home/averemyeyev/andriy/projects/battleship/src/EnterName.tsx",[],"/home/averemyeyev/andriy/projects/battleship/src/Header.tsx",[],"/home/averemyeyev/andriy/projects/battleship/src/StartGame.tsx",[],"/home/averemyeyev/andriy/projects/battleship/src/Battle.tsx",["69","70","71","72","73","74","75"],"/home/averemyeyev/andriy/projects/battleship/src/strings.ts",[],"/home/averemyeyev/andriy/projects/battleship/src/actions/index.ts",[],"/home/averemyeyev/andriy/projects/battleship/src/Field.tsx",[],"/home/averemyeyev/andriy/projects/battleship/src/PlayAgain.tsx",[],"/home/averemyeyev/andriy/projects/battleship/src/Legend.tsx",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":143,"column":6,"nodeType":"82","endLine":143,"endColumn":8,"suggestions":"83"},{"ruleId":"80","severity":1,"message":"84","line":148,"column":6,"nodeType":"82","endLine":148,"endColumn":25,"suggestions":"85"},{"ruleId":"80","severity":1,"message":"86","line":170,"column":6,"nodeType":"82","endLine":170,"endColumn":37,"suggestions":"87"},{"ruleId":"80","severity":1,"message":"88","line":183,"column":6,"nodeType":"82","endLine":183,"endColumn":39,"suggestions":"89"},{"ruleId":"80","severity":1,"message":"90","line":187,"column":6,"nodeType":"82","endLine":187,"endColumn":31,"suggestions":"91"},{"ruleId":"80","severity":1,"message":"92","line":196,"column":6,"nodeType":"82","endLine":196,"endColumn":33,"suggestions":"93"},{"ruleId":"80","severity":1,"message":"94","line":200,"column":6,"nodeType":"82","endLine":200,"endColumn":33,"suggestions":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateComputerMap'. Either include it or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has a missing dependency: 'drawPossibleDirections'. Either include it or remove the dependency array.",["99"],"React Hook useEffect has missing dependencies: 'player.attempts', 'removeShadows', 'setIsBattle', 'setLegendLineOne', 'setLegendLineTwo', 'setPlayAgain', and 'setScore'. Either include them or remove the dependency array.",["100"],"React Hook useEffect has missing dependencies: 'computer.attempts', 'setLegendLineOne', 'setLegendLineTwo', 'setPlayAgain', and 'setScore'. Either include them or remove the dependency array.",["101"],"React Hook useEffect has a missing dependency: 'setFirstTime'. Either include it or remove the dependency array.",["102"],"React Hook useEffect has missing dependencies: 'checkComputerAttempt' and 'firstRender'. Either include them or remove the dependency array.",["103"],"React Hook useEffect has a missing dependency: 'placePlayerShipOnMap'. Either include it or remove the dependency array.",["104"],"no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"Update the dependencies array to be: [generateComputerMap]",{"range":"119","text":"120"},"Update the dependencies array to be: [drawPossibleDirections, player.shipsCells]",{"range":"121","text":"122"},"Update the dependencies array to be: [player.shipsStatus, firstTime, player.attempts, removeShadows, setIsBattle, setLegendLineOne, setLegendLineTwo, setPlayAgain, setScore]",{"range":"123","text":"124"},"Update the dependencies array to be: [computer.attempts, computer.shipsStatus, firstTime, setLegendLineOne, setLegendLineTwo, setPlayAgain, setScore]",{"range":"125","text":"126"},"Update the dependencies array to be: [player.ships.battleShip, setFirstTime]",{"range":"127","text":"128"},"Update the dependencies array to be: [checkComputerAttempt, firstRender, player.damagedShip.length]",{"range":"129","text":"130"},"Update the dependencies array to be: [player.ships, currentCell, placePlayerShipOnMap]",{"range":"131","text":"132"},[3703,3705],"[generateComputerMap]",[3791,3810],"[drawPossibleDirections, player.shipsCells]",[4379,4410],"[player.shipsStatus, firstTime, player.attempts, removeShadows, setIsBattle, setLegendLineOne, setLegendLineTwo, setPlayAgain, setScore]",[4702,4735],"[computer.attempts, computer.shipsStatus, firstTime, setLegendLineOne, setLegendLineTwo, setPlayAgain, setScore]",[4831,4856],"[player.ships.battleShip, setFirstTime]",[5051,5078],"[checkComputerAttempt, firstRender, player.damagedShip.length]",[5146,5173],"[player.ships, currentCell, placePlayerShipOnMap]"]
=======
[{"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\index.tsx":"1","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\store.ts":"2","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\App.tsx":"3","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\GameController.tsx":"4","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\reducers\\index.ts":"5","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\database.ts":"6","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\Firewall.tsx":"7","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\EnterName.tsx":"8","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\strings.ts":"9","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\actions\\index.ts":"10","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\StartGame.tsx":"11","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\Header.tsx":"12","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\Battle.tsx":"13","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\PlayAgain.tsx":"14","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\Field.tsx":"15"},{"size":531,"mtime":1621518789568,"results":"16","hashOfConfig":"17"},{"size":143,"mtime":1621483656168,"results":"18","hashOfConfig":"17"},{"size":443,"mtime":1621485690257,"results":"19","hashOfConfig":"17"},{"size":957,"mtime":1621520277543,"results":"20","hashOfConfig":"17"},{"size":7314,"mtime":1621918587450,"results":"21","hashOfConfig":"17"},{"size":1202,"mtime":1621483656160,"results":"22","hashOfConfig":"17"},{"size":383,"mtime":1621519930995,"results":"23","hashOfConfig":"17"},{"size":2353,"mtime":1621483656157,"results":"24","hashOfConfig":"17"},{"size":2068,"mtime":1621563954029,"results":"25","hashOfConfig":"17"},{"size":3281,"mtime":1621483656159,"results":"26","hashOfConfig":"17"},{"size":1747,"mtime":1621518825156,"results":"27","hashOfConfig":"17"},{"size":1396,"mtime":1621483656158,"results":"28","hashOfConfig":"17"},{"size":35447,"mtime":1621918841606,"results":"29","hashOfConfig":"17"},{"size":1881,"mtime":1621563954029,"results":"30","hashOfConfig":"17"},{"size":3906,"mtime":1621565863417,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"16ihuxx",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\index.tsx",[],["65","66"],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\store.ts",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\App.tsx",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\GameController.tsx",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\reducers\\index.ts",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\database.ts",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\Firewall.tsx",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\EnterName.tsx",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\strings.ts",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\actions\\index.ts",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\StartGame.tsx",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\Header.tsx",[],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\Battle.tsx",["67","68","69","70","71","72"],"import React, { useState, useEffect, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Grid, Typography, Button, TextField, Modal } from \"@material-ui/core\";\r\n// import { makeStyles } from \"@material-ui/styles\";\r\nimport Field from \"./Field\";\r\nimport PlayAgain from \"./PlayAgain\";\r\n\r\nimport {\r\n  setShip,\r\n  setShipsCells,\r\n  setShipsShadowsCells,\r\n  setLegendLineOne,\r\n  setLegendLineTwo,\r\n  setShipsStatus,\r\n  setWrongAttempts,\r\n  setAttempts,\r\n  setShowComputer,\r\n  setKilledCells,\r\n  removeShipCell,\r\n  setPossibleDirections,\r\n  removePossibleDirections,\r\n  setShipsCellsTotal,\r\n  setShipsShadowsCellsTotal,\r\n  removeShadows,\r\n  setPlayAgain,\r\n  setFirstTime,\r\n  clearEverything,\r\n  setDamagedShip,\r\n  setIsBattle,\r\n  setScore,\r\n} from \"./actions/index\";\r\n\r\nimport {\r\n  rows,\r\n  columns,\r\n  shipNames,\r\n  direction,\r\n  shipLengths,\r\n  shipNicknames,\r\n  generateFreeCells,\r\n} from \"./database\";\r\nimport strings from \"./strings\";\r\nimport {\r\n  TypeOneAction,\r\n  TypeTwoAction,\r\n  TypeThreeAction,\r\n  TypeFourAction,\r\n  TypeFiveAction,\r\n  TypeSixAction,\r\n  TypeSevenAction,\r\n  TypeEightAction,\r\n  TypeNineAction,\r\n  TypeTenAction,\r\n} from \"./types\";\r\n\r\ntype BattleProps = {\r\n  setShip: (player: string, ship: string, position: string[]) => TypeTenAction;\r\n  setShipsCells: (player: string, cell: string) => TypeSixAction;\r\n  setShipsShadowsCells: (player: string, cell: string) => TypeSixAction;\r\n  computer: any;\r\n  setLegendLineOne: (legend: string) => TypeThreeAction;\r\n  setLegendLineTwo: (legend: string) => TypeThreeAction;\r\n  player: any;\r\n  setShipsStatus: (\r\n    player: string,\r\n    ship: string,\r\n    status: boolean\r\n  ) => TypeEightAction;\r\n  setShowComputer: () => TypeOneAction;\r\n  showComputer: boolean;\r\n  setKilledCells: (player: string, cell: string) => TypeSixAction;\r\n  removeShipCell: (\r\n    player: string,\r\n    ship: string,\r\n    cell: string\r\n  ) => TypeNineAction;\r\n  setWrongAttempts: (player: string, atempt: string) => TypeSixAction;\r\n  setPossibleDirections: (cell: string) => TypeThreeAction;\r\n  removePossibleDirections: () => TypeOneAction;\r\n  setAttempts: (player: string) => TypeThreeAction;\r\n  setShipsCellsTotal: (obj: any) => TypeFiveAction;\r\n  setShipsShadowsCellsTotal: (player: string, obj: any) => TypeSevenAction;\r\n  removeShadows: () => TypeOneAction;\r\n  setPlayAgain: (status: boolean) => TypeTwoAction;\r\n  playAgain: boolean;\r\n  setFirstTime: (status: boolean) => TypeTwoAction;\r\n  firstTime: boolean;\r\n  clearEverything: () => TypeOneAction;\r\n  setDamagedShip: (ship: string[]) => TypeFourAction;\r\n  setIsBattle: (status: boolean) => TypeTwoAction;\r\n  isBattle: boolean;\r\n  setScore: (side: string) => TypeThreeAction;\r\n  score: number[];\r\n  playerName: string;\r\n};\r\n\r\n// const useStyles = makeStyles({\r\n// });\r\n\r\nconst Battle: React.FC<BattleProps> = (props) => {\r\n  // to generate computer map once battle is mounted\r\n\r\n  // const classes = useStyles();\r\n\r\n  const {\r\n    setShip,\r\n    setShipsCells,\r\n    setShipsShadowsCells,\r\n    computer,\r\n    setLegendLineOne,\r\n    setLegendLineTwo,\r\n    player,\r\n    setShipsStatus,\r\n    setShowComputer,\r\n    showComputer,\r\n    setKilledCells,\r\n    removeShipCell,\r\n    setWrongAttempts,\r\n    setPossibleDirections,\r\n    removePossibleDirections,\r\n    setAttempts,\r\n    setShipsCellsTotal,\r\n    setShipsShadowsCellsTotal,\r\n    removeShadows,\r\n    setPlayAgain,\r\n    playAgain,\r\n    setFirstTime,\r\n    firstTime,\r\n    clearEverything,\r\n    setDamagedShip,\r\n    setIsBattle,\r\n    isBattle,\r\n    setScore,\r\n    score,\r\n    playerName,\r\n  } = props;\r\n  const [firstRender, setFirstRender] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const [playerTurn, setPlayerTurn] = useState(true);\r\n\r\n  useEffect(() => {\r\n    generateComputerMap();\r\n    setFirstRender(true);\r\n  }, []);\r\n\r\n  // to monitor changes in\r\n  useEffect(() => {\r\n    drawPossibleDirections();\r\n  }, [player.shipsCells]);\r\n\r\n  useEffect(() => {\r\n    if (Object.values(player.shipsStatus).every((status) => status))\r\n      removeShadows();\r\n    if (\r\n      Object.values(player.shipsStatus).every((status) => status) &&\r\n      !firstTime\r\n    )\r\n      setIsBattle(true);\r\n    if (\r\n      Object.values(player.shipsStatus).every((status) => !status) &&\r\n      player.attempts &&\r\n      !firstTime\r\n    ) {\r\n      setLegendLineOne(strings.battle.lose);\r\n      setLegendLineTwo(\"\");\r\n      setPlayAgain(true);\r\n      setIsBattle(false);\r\n      setScore(\"computer\");\r\n    }\r\n    // removed player.damagedShip\r\n  }, [player.shipsStatus, firstTime]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      Object.values(computer.shipsStatus).every((status) => !status) &&\r\n      computer.attempts &&\r\n      !firstTime\r\n    ) {\r\n      setLegendLineOne(strings.battle.win);\r\n      setLegendLineTwo(\"\");\r\n      setPlayAgain(true);\r\n      setScore(\"player\");\r\n    }\r\n  }, [computer.shipsStatus, firstTime]);\r\n\r\n  useEffect(() => {\r\n    if (player.ships.battleShip.length === 4) setFirstTime(false);\r\n  }, [player.ships.battleShip]);\r\n\r\n  const [playerAttempt, setPlayerAttempt] = useState(\"\");\r\n\r\n  // Why we need this??\r\n  useEffect(() => {\r\n    if (firstRender) {\r\n      setTimeout(() => checkComputerAttempt(), 2000);\r\n    }\r\n  }, [player.damagedShip.length]);\r\n\r\n  const oneMoreTimeGame = () => {\r\n    setPlayAgain(false);\r\n    clearEverything();\r\n    generateComputerMap();\r\n    setLegendLineOne(strings.battle.keepPlaying);\r\n    setLegendLineTwo(strings.battle.placeStartPoint);\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////\r\n  // multifunctional methods necessary for player and computer as well\r\n\r\n  // method to generate random position on map\r\n  const randomPosition = () => {\r\n    const randomLetter = rows[Math.floor(Math.random() * rows.length)];\r\n    const randomNumber = columns[Math.floor(Math.random() * columns.length)];\r\n    return randomLetter + randomNumber;\r\n  };\r\n\r\n  // method to determine number part of cell consist of 1 or 2 digits (e.g d9 or d10)\r\n  const considerCellNumber = (cell: string) => {\r\n    return cell.length === 3 ? cell[1] + cell[2] : cell[1];\r\n  };\r\n\r\n  // method to calculate length of ship based on it's name\r\n  const calculateShipLength = (ship: string) => {\r\n    let shipLength = 1;\r\n    if (ship[0] === \"b\") shipLength = 4;\r\n    if (ship[0] === \"c\") shipLength = 3;\r\n    if (ship[0] === \"d\") shipLength = 2;\r\n    return shipLength;\r\n  };\r\n\r\n  // method to determine possible ship directions based on starting point and free cells around\r\n  const whereTurnShip = (\r\n    obj: any,\r\n    ship: string,\r\n    firstPoint: string,\r\n    shipDirections: string[]\r\n  ) => {\r\n    const shipLength = calculateShipLength(ship);\r\n    const number = considerCellNumber(firstPoint);\r\n    for (let i = 1; i < shipLength; i++) {\r\n      if (!obj[`${firstPoint[0]}${Number(number) - i}`])\r\n        shipDirections = shipDirections.filter((x) => x !== \"up\");\r\n      if (!obj[`${firstPoint[0]}${Number(number) + i}`])\r\n        shipDirections = shipDirections.filter((x) => x !== \"down\");\r\n      if (\r\n        !obj[`${String.fromCharCode(firstPoint[0].charCodeAt(0) - i)}${number}`]\r\n      )\r\n        shipDirections = shipDirections.filter((x) => x !== \"left\");\r\n      if (\r\n        !obj[`${String.fromCharCode(firstPoint[0].charCodeAt(0) + i)}${number}`]\r\n      )\r\n        shipDirections = shipDirections.filter((x) => x !== \"right\");\r\n    }\r\n    return shipDirections;\r\n  };\r\n\r\n  // method to create neighbour cells array considering non existing cells\r\n  const createNeighbourCellsArray = (cell: string, all = true) => {\r\n    const number = considerCellNumber(cell);\r\n    // create empty board to know which cells are exist\r\n    const board = generateFreeCells({});\r\n    // create array of all possble neigbour cells\r\n    let neighbourCells = [\r\n      upperNeighbour(cell),\r\n      downNeighbour(cell),\r\n      leftNeighbour(cell),\r\n      rightNeighbour(cell),\r\n    ];\r\n\r\n    if (all)\r\n      neighbourCells = [\r\n        ...neighbourCells,\r\n        `${String.fromCharCode(cell[0].charCodeAt(0) - 1)}${\r\n          Number(number) - 1\r\n        }`,\r\n        `${String.fromCharCode(cell[0].charCodeAt(0) - 1)}${\r\n          Number(number) + 1\r\n        }`,\r\n        `${String.fromCharCode(cell[0].charCodeAt(0) + 1)}${\r\n          Number(number) - 1\r\n        }`,\r\n        `${String.fromCharCode(cell[0].charCodeAt(0) + 1)}${\r\n          Number(number) + 1\r\n        }`,\r\n      ];\r\n    // return only filtered existing cells\r\n    return neighbourCells.filter((pos) => board[pos]);\r\n  };\r\n\r\n  // create array of ship cells together with shadows based on ship array\r\n  const fillShipArrayWithShadows = (shipPosition: string[]) => {\r\n    let shipPositionWithShadows: string[] = [];\r\n    shipPosition.forEach((pos: string) => {\r\n      const neighbourCells = createNeighbourCellsArray(pos);\r\n      shipPositionWithShadows = [\r\n        ...shipPositionWithShadows,\r\n        pos,\r\n        ...neighbourCells,\r\n      ];\r\n    });\r\n    // return only unique cells\r\n    return [...new Set(shipPositionWithShadows)];\r\n  };\r\n\r\n  // method to return corresponding object based on string\r\n  const whatTheSide = (side: string) => (side === \"player\" ? player : computer);\r\n\r\n  // methods to determine neighbour cells\r\n  const upperNeighbour = (cell: string) => {\r\n    const number = considerCellNumber(cell);\r\n    return `${cell[0]}${Number(number) + 1}`;\r\n  };\r\n  const downNeighbour = (cell: string) => {\r\n    const number = considerCellNumber(cell);\r\n    return `${cell[0]}${Number(number) - 1}`;\r\n  };\r\n  const leftNeighbour = (cell: string) => {\r\n    const number = considerCellNumber(cell);\r\n    return `${String.fromCharCode(cell[0].charCodeAt(0) - 1)}${number}`;\r\n  };\r\n  const rightNeighbour = (cell: string) => {\r\n    const number = considerCellNumber(cell);\r\n    return `${String.fromCharCode(cell[0].charCodeAt(0) + 1)}${number}`;\r\n  };\r\n\r\n  // method to determine what the ship based on catched cell, returns ship name\r\n  const whatTheShip = (side: string, value: string) => {\r\n    const sideObj = whatTheSide(side);\r\n    let currShip = \"\";\r\n    shipNames.forEach((ship) => {\r\n      if (sideObj[ship].includes(value)) currShip = ship;\r\n    });\r\n    return currShip;\r\n  };\r\n\r\n  // method to determine what the ship index based on ship name\r\n  const whatTheShipIndex = (ship: string, shipNames: string[]) => {\r\n    return shipNames.findIndex((currShip) => currShip === ship);\r\n  };\r\n\r\n  // method to check was ship completely destroyed or not\r\n  const isShipDestroyed = (side: string, ship: string) => {\r\n    const sideObj = whatTheSide(side);\r\n    return sideObj[ship].length === 1 ? true : false;\r\n  };\r\n\r\n  // method to remove cell from attempt from corresponding ship array\r\n  // and check was ship completely destroyed or not\r\n  const removeCellFromShip = (side: string, value: string) => {\r\n    const currentShip = whatTheShip(side, value);\r\n    const currentIndex: number = whatTheShipIndex(currentShip, shipNames);\r\n    removeShipCell(side, currentShip, value);\r\n    if (isShipDestroyed(side, currentShip)) {\r\n      if (side === \"player\") {\r\n        setLegendLineOne(\r\n          strings.battle.yourShipDestroyed.replace(\r\n            \"{}\",\r\n            shipNicknames[currentIndex]\r\n          )\r\n        );\r\n        setShipsStatus(\"player\", currentShip, false);\r\n      } else {\r\n        setLegendLineOne(\r\n          strings.battle.youDestroyedShip.replace(\r\n            \"{}\",\r\n            shipNicknames[currentIndex]\r\n          )\r\n        );\r\n        setShipsStatus(\"computer\", currentShip, false);\r\n      }\r\n    }\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////\r\n  // generate computer ships and all related methods to computer methods\r\n\r\n  // method to generate starting point, only checks if point is not occupied\r\n  const generateStartingPoint = (obj: any) => {\r\n    // generate first attempt of ship starting point\r\n    let startingPoint = randomPosition();\r\n    // if starting point is occupied we need to generate another one\r\n    while (!obj[startingPoint]) {\r\n      startingPoint = randomPosition();\r\n    }\r\n    return startingPoint;\r\n  };\r\n\r\n  // method to fill ship array based on choosen direction\r\n  const fillShipArray = (ship: string, arr: string[], direction: string) => {\r\n    const number = considerCellNumber(arr[0]);\r\n    const shipLength = calculateShipLength(ship);\r\n    if (direction === \"up\") {\r\n      for (let i = 1; i < shipLength; i++) {\r\n        arr.push(`${arr[0][0]}${Number(number) - i}`);\r\n      }\r\n    }\r\n    if (direction === \"down\") {\r\n      for (let i = 1; i < shipLength; i++) {\r\n        arr.push(`${arr[0][0]}${Number(number) + i}`);\r\n      }\r\n    }\r\n    if (direction === \"left\") {\r\n      for (let i = 1; i < shipLength; i++) {\r\n        arr.push(\r\n          `${String.fromCharCode(arr[0][0].charCodeAt(0) - i)}${number}`\r\n        );\r\n      }\r\n    }\r\n    if (direction === \"right\") {\r\n      for (let i = 1; i < shipLength; i++) {\r\n        arr.push(\r\n          `${String.fromCharCode(arr[0][0].charCodeAt(0) + i)}${number}`\r\n        );\r\n      }\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  // method to generate ship position based on current condition of map cells\r\n  const generateShip = (ship: string, obj: any) => {\r\n    // generate first cell of first ship\r\n    let firstCell = generateStartingPoint(obj);\r\n    let shipPosition = [];\r\n    shipPosition.push(firstCell);\r\n    // if it's not 1cell ship make sure that you can turn ship somewhere\r\n    if (ship[0] !== \"v\") {\r\n      let shipPossibleDirections = whereTurnShip(\r\n        obj,\r\n        ship,\r\n        firstCell,\r\n        direction\r\n      );\r\n      while (shipPossibleDirections.length === 0) {\r\n        firstCell = generateStartingPoint(obj);\r\n        shipPossibleDirections = whereTurnShip(obj, ship, firstCell, direction);\r\n      }\r\n      shipPosition[0] = firstCell;\r\n      // choose random direction of ship based on possible directions\r\n      const shipDirection =\r\n        shipPossibleDirections[\r\n          Math.floor(Math.random() * shipPossibleDirections.length)\r\n        ];\r\n      // add rest of ship coordinates to array to have full shape of ship\r\n      shipPosition = fillShipArray(ship, shipPosition, shipDirection);\r\n    }\r\n    return shipPosition;\r\n  };\r\n\r\n  // method to generate complete computer map of ships\r\n  const generateComputerMap = () => {\r\n    // object to storage ships positions\r\n    const ships = generateFreeCells({});\r\n    // object to storage ships positions with ships shadows\r\n    const shipsShadows = generateFreeCells({});\r\n    shipNames.forEach((ship) => {\r\n      const shipPosition = generateShip(ship, shipsShadows);\r\n      setShip(\"computer\", ship, shipPosition);\r\n      setShipsStatus(\"computer\", ship, true);\r\n      const shipPositionWithArrays = fillShipArrayWithShadows(shipPosition);\r\n      shipPosition.forEach((pos: string) => (ships[pos] = false));\r\n      shipPositionWithArrays.forEach(\r\n        (pos: string) => (shipsShadows[pos] = false)\r\n      );\r\n    });\r\n    // pass objects with information to corresponding reducers\r\n    setShipsCellsTotal(ships);\r\n    setShipsShadowsCellsTotal(\"computer\", shipsShadows);\r\n  };\r\n\r\n  // method to generate random computer attempt considering is this cell occupied with previous random or with shadow of guessed ship\r\n  const generateComputerAttempt = () => {\r\n    let currentAttempt = randomPosition();\r\n    while (\r\n      computer.wrongAttempts[currentAttempt] ||\r\n      !player.shipsShadowsCells[currentAttempt]\r\n    )\r\n      currentAttempt = randomPosition();\r\n    return currentAttempt;\r\n  };\r\n\r\n  // method how computer is going to guess next player ship cell based on\r\n  // quantity of already guessed cells\r\n  const guessNextPlayerShipCell = (ship: string[]) =>\r\n    ship.length === 1\r\n      ? guessBasedOnOneCell(ship[0])\r\n      : guessBasedOnTwoCells(ship);\r\n\r\n  // method to add cells to damaged ship\r\n  const addCellToDamagedShip = (cell: string) => {\r\n    const { damagedShip } = player;\r\n    if (damagedShip.length === 0) {\r\n      setDamagedShip([cell]);\r\n    } else {\r\n      const direction = determineShipDirection(damagedShip[0], cell);\r\n      const damagedShipCopy = damagedShip;\r\n      let necessaryIndex;\r\n      if (direction === strings.battle.vertical)\r\n        necessaryIndex = damagedShip.findIndex(\r\n          (currentCell: string) =>\r\n            Number(considerCellNumber(cell)) <\r\n            Number(considerCellNumber(currentCell))\r\n        );\r\n      if (direction === strings.battle.horizontal)\r\n        necessaryIndex = damagedShip.findIndex(\r\n          (currentCell: string) =>\r\n            cell.charCodeAt(0) < currentCell.charCodeAt(0)\r\n        );\r\n      if (necessaryIndex === -1) necessaryIndex = damagedShip.length;\r\n      damagedShipCopy.splice(necessaryIndex, 0, cell);\r\n      setDamagedShip(damagedShipCopy);\r\n    }\r\n  };\r\n\r\n  // method to determine ship direction based on ship coordinates\r\n  const determineShipDirection = (firstCell: string, lastCell: string) => {\r\n    return firstCell[0] === lastCell[0]\r\n      ? strings.battle.vertical\r\n      : strings.battle.horizontal;\r\n  };\r\n\r\n  // method for computer attempt after player attempt\r\n  const checkComputerAttempt = () => {\r\n    const { damagedShip } = player;\r\n    const currentAttempt =\r\n      damagedShip.length === 0\r\n        ? generateComputerAttempt()\r\n        : guessNextPlayerShipCell(damagedShip);\r\n    setWrongAttempts(\"computer\", currentAttempt);\r\n    setAttempts(\"computer\");\r\n    setLegendLineOne(strings.battle.computerTurn.replace(\"{}\", currentAttempt));\r\n    setLegendLineTwo(\"\");\r\n    // check if ship was damaged or not\r\n    if (!player.shipsCells[currentAttempt]) {\r\n      // if ship was damaged\r\n      setLegendLineTwo(strings.battle.computerCatched);\r\n      setKilledCells(\"player\", currentAttempt);\r\n      const damagedShipName: string = whatTheShip(\"player\", currentAttempt);\r\n      removeCellFromShip(\"player\", currentAttempt);\r\n      // check if ship was completely destroyed or not\r\n      if (isShipDestroyed(\"player\", damagedShipName)) {\r\n        // if completely destroyed we just looking for new random cell\r\n        const destroyedShipShadows = fillShipArrayWithShadows([\r\n          ...damagedShip,\r\n          currentAttempt,\r\n        ]);\r\n        const playerShipsShadowsCellsCopy = player.shipsShadowsCells;\r\n        destroyedShipShadows.forEach(\r\n          (cell: string) => (playerShipsShadowsCellsCopy[cell] = false)\r\n        );\r\n        setShipsShadowsCellsTotal(\"player\", playerShipsShadowsCellsCopy);\r\n        setDamagedShip([]);\r\n        if (damagedShipName[0] === \"v\")\r\n          setTimeout(() => checkComputerAttempt(), 2000);\r\n      } else {\r\n        addCellToDamagedShip(currentAttempt);\r\n      }\r\n    } else {\r\n      setTimeout(() => {\r\n        setLegendLineOne(strings.battle.computerMissed);\r\n        setLegendLineTwo(strings.battle.yourTurn);\r\n        setPlayerTurn(true);\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  // method to provide random neighbour cell based on one cell\r\n  const guessBasedOnOneCell = (cell: string) => {\r\n    // we need to filter array of cells to make sure that we not tried this cell before and it's not lying on other ship shadow\r\n    const neighbourCells = createNeighbourCellsArray(cell, false);\r\n    const filteredneighbourCells = neighbourCells.filter(\r\n      (cell) => !computer.wrongAttempts[cell] && player.shipsShadowsCells[cell]\r\n    );\r\n    // take random cell from filtered array\r\n    let randomNeigbourCell =\r\n      filteredneighbourCells[\r\n        Math.floor(Math.random() * filteredneighbourCells.length)\r\n      ];\r\n    return randomNeigbourCell;\r\n  };\r\n\r\n  // guessing next player cell if we have 2 cells of damaged ship\r\n  const guessBasedOnTwoCells = (ship: string[]) => {\r\n    const direction = determineShipDirection(ship[0], ship[ship.length - 1]);\r\n    const neighbourCells = [];\r\n    if (direction === strings.battle.vertical) {\r\n      neighbourCells.push(\r\n        `${ship[0][0]}${Number(considerCellNumber(ship[0])) - 1}`\r\n      );\r\n      neighbourCells.push(\r\n        `${ship[0][0]}${Number(considerCellNumber(ship[ship.length - 1])) + 1}`\r\n      );\r\n    }\r\n    if (direction === strings.battle.horizontal) {\r\n      const thisCellNumber = considerCellNumber(ship[0]);\r\n      neighbourCells.push(\r\n        `${String.fromCharCode(ship[0].charCodeAt(0) - 1)}${thisCellNumber}`\r\n      );\r\n      neighbourCells.push(\r\n        `${String.fromCharCode(\r\n          ship[ship.length - 1].charCodeAt(0) + 1\r\n        )}${thisCellNumber}`\r\n      );\r\n    }\r\n    const filteredneighbourCells = neighbourCells.filter(\r\n      (cell) => !computer.wrongAttempts[cell] && player.shipsShadowsCells[cell]\r\n    );\r\n    return filteredneighbourCells.length === 1\r\n      ? filteredneighbourCells[0]\r\n      : filteredneighbourCells[\r\n          Math.floor(Math.random() * filteredneighbourCells.length)\r\n        ];\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////\r\n  // methods for player playing\r\n\r\n  // method to place player's ship on map\r\n  const placePlayerShipOnMap = (cellNumber: string) => {\r\n    const { ships } = player;\r\n    let currentShip = \"\";\r\n    let index = 0;\r\n    if (!ships.battleShip.length || ships.battleShip.length < 4)\r\n      currentShip = shipNames[0];\r\n    else if (!ships.cruiserFirst.length || ships.cruiserFirst.length < 3) {\r\n      currentShip = shipNames[1];\r\n      index = 1;\r\n    } else if (!ships.cruiserSecond.length || ships.cruiserSecond.length < 3) {\r\n      currentShip = shipNames[2];\r\n      index = 2;\r\n    } else if (\r\n      !ships.destroyerFirst.length ||\r\n      ships.destroyerFirst.length < 2\r\n    ) {\r\n      currentShip = shipNames[3];\r\n      index = 3;\r\n    } else if (\r\n      !ships.destroyerSecond.length ||\r\n      ships.destroyerSecond.length < 2\r\n    ) {\r\n      currentShip = shipNames[4];\r\n      index = 4;\r\n    } else if (\r\n      !ships.destroyerThird.length ||\r\n      ships.destroyerThird.length < 2\r\n    ) {\r\n      currentShip = shipNames[5];\r\n      index = 5;\r\n    } else if (!ships.vedetteFirst.length || ships.vedetteFirst.length < 1) {\r\n      currentShip = shipNames[6];\r\n      index = 6;\r\n    } else if (!ships.vedetteSecond.length || ships.vedetteSecond.length < 1) {\r\n      currentShip = shipNames[7];\r\n      index = 7;\r\n    } else if (!ships.vedetteThird.length || ships.vedetteThird.length < 1) {\r\n      currentShip = shipNames[8];\r\n      index = 8;\r\n    } else if (!ships.vedetteForth.length || ships.vedetteForth.length < 1) {\r\n      currentShip = shipNames[9];\r\n      index = 9;\r\n    }\r\n\r\n    if (\r\n      (player.shipsCells[cellNumber] && !ships[currentShip].length) ||\r\n      (player.shipsCells[cellNumber] && player.possibleDirections[cellNumber])\r\n    ) {\r\n      if (\r\n        (index === 0 && ships[currentShip]?.length < shipLengths[index]) ||\r\n        (index > 0 &&\r\n          ships[shipNames[index - 1]]?.length === shipLengths[index - 1] &&\r\n          ships[currentShip]?.length < shipLengths[index])\r\n      ) {\r\n        setShip(\"player\", shipNames[index], [cellNumber]);\r\n        setShipsCells(\"player\", cellNumber);\r\n        if (ships[currentShip]?.length === shipLengths[index] - 1) {\r\n          const currentShipShadow = fillShipArrayWithShadows([\r\n            ...ships[currentShip],\r\n            cellNumber,\r\n          ]);\r\n          currentShipShadow.forEach((cell) =>\r\n            setShipsShadowsCells(\"player\", cell)\r\n          );\r\n        }\r\n        if (ships[currentShip]?.length === 0 && index < 6) {\r\n          const directions = whereTurnShip(\r\n            player.shipsShadowsCells,\r\n            currentShip,\r\n            cellNumber,\r\n            direction\r\n          );\r\n          directions.forEach((dir) =>\r\n            fillPossibleDirection(currentShip, [cellNumber], dir)\r\n          );\r\n        }\r\n        if (ships[currentShip]?.length === 1 && index < 6) {\r\n          removePossibleDirections();\r\n          const dir = determineDirection(ships[currentShip][0], cellNumber);\r\n          fillPossibleDirection(currentShip, [ships[currentShip][0]], dir);\r\n        }\r\n      }\r\n    } else if (\r\n      player.shipsCells[cellNumber] &&\r\n      ships[currentShip].length &&\r\n      !player.possibleDirections[cellNumber]\r\n    ) {\r\n      setLegendLineOne(\"Please, choose cell from ship shadow\");\r\n      setLegendLineTwo(\"\");\r\n    }\r\n    console.log(ships);\r\n  };\r\n\r\n  // method to check was attempt wrong or not\r\n  const checkPlayerAttempt = (value: string) => {\r\n    const correctedValue = value.toLowerCase();\r\n    console.log(player.ships);\r\n    if (!playerTurn) {\r\n      setLegendLineOne(strings.battle.notYourTurn);\r\n      setLegendLineTwo(strings.battle.wait);\r\n    } else {\r\n      setLegendLineOne(\r\n        strings.battle.yourAttempt.replace(\"{}\", correctedValue)\r\n      );\r\n      setLegendLineTwo(\"\");\r\n      if (player.wrongAttempts[value]) {\r\n        setLegendLineTwo(strings.battle.alreadyTried);\r\n      } else if (computer.shipsCells[correctedValue] === undefined) {\r\n        setLegendLineTwo(strings.battle.cellNotExist);\r\n      } else {\r\n        setWrongAttempts(\"player\", correctedValue);\r\n        setAttempts(\"player\");\r\n        if (!computer.shipsCells[correctedValue]) {\r\n          const currentShip = whatTheShip(\"computer\", value);\r\n          if (isShipDestroyed(\"computer\", currentShip)) {\r\n            setLegendLineTwo(strings.battle.oneMoreTry);\r\n          } else {\r\n            setLegendLineTwo(strings.battle.youCatched);\r\n          }\r\n          setKilledCells(\"computer\", correctedValue);\r\n          removeCellFromShip(\"computer\", correctedValue);\r\n        } else {\r\n          setLegendLineTwo(strings.battle.youMissed);\r\n          setPlayerTurn(false);\r\n          setTimeout(() => {\r\n            checkComputerAttempt();\r\n          }, 2000);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // method to fill possible directions\r\n  const fillPossibleDirection = (\r\n    ship: string,\r\n    cell: string[],\r\n    direction: string\r\n  ) => {\r\n    const shipPosition = fillShipArray(ship, cell, direction);\r\n    shipPosition.forEach((shipCell: string, cellIndex: number) => {\r\n      if (cellIndex > 0) setPossibleDirections(shipCell);\r\n    });\r\n  };\r\n\r\n  // method to determine ship direction based on started and second points\r\n  const determineDirection = (cellFirst: string, cellSecond: string) => {\r\n    const cellFirstNumber = considerCellNumber(cellFirst);\r\n    const cellSecondNumber = considerCellNumber(cellSecond);\r\n    return cellFirst[0] === cellSecond[0]\r\n      ? Number(cellFirstNumber) > Number(cellSecondNumber)\r\n        ? \"up\"\r\n        : \"down\"\r\n      : String.fromCharCode(cellFirst[0].charCodeAt(0) - 1) === cellSecond[0]\r\n      ? \"left\"\r\n      : \"right\";\r\n  };\r\n\r\n  // method to draw possible directions of ship once start position is determined\r\n  // right now only provides information in legend\r\n  const drawPossibleDirections = () => {\r\n    shipNames.forEach((ship, index) => {\r\n      if (player.ships[ship]?.length === shipLengths[index]) {\r\n        if (index < shipNames.length - 1) {\r\n          setLegendLineOne(\r\n            strings.battle.completed.replace(\"{}\", shipNicknames[index])\r\n          );\r\n          setLegendLineTwo(\r\n            strings.battle.proposition.replace(\"{}\", shipNicknames[index + 1])\r\n          );\r\n        } else {\r\n          setLegendLineOne(strings.battle.placementCompleted);\r\n          setLegendLineTwo(\"\");\r\n        }\r\n        setShipsStatus(\"player\", ship, true);\r\n      }\r\n    });\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////\r\n  // front-end methods\r\n\r\n  const killPlayer = () => {\r\n    shipNames.forEach((ship) => setShipsStatus(\"player\", ship, false));\r\n    setFirstTime(false);\r\n    setAttempts(\"player\");\r\n    setOpen(true);\r\n  };\r\n\r\n  const killComputer = () => {\r\n    shipNames.forEach((ship) => setShipsStatus(\"computer\", ship, false));\r\n    setFirstTime(false);\r\n    setAttempts(\"computer\");\r\n    setOpen(true);\r\n  };\r\n\r\n  const shipsCondition = (side: any) => {\r\n    const condition = (ship: string, index: number) => {\r\n      let response = \"\";\r\n      if (side.ships[ship].length === shipLengths[index])\r\n        response = strings.battle.undamaged;\r\n      else if (side.ships[ship].length === 0)\r\n        response = strings.battle.destroyed;\r\n      else response = strings.battle.damaged;\r\n      return response;\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {shipNicknames.map((ship, index) => {\r\n          return (\r\n            <Typography\r\n              key={`shipsCondition${ship}${index}`}\r\n              variant=\"subtitle2\"\r\n            >{`${index + 1}.${ship}: ${condition(\r\n              shipNames[index],\r\n              index\r\n            )}`}</Typography>\r\n          );\r\n        })}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid\r\n        container\r\n        style={{ marginBottom: 20 }}\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Typography style={{ color: \"white\" }} variant=\"h5\">\r\n          Score:\r\n        </Typography>\r\n        <Typography style={{ color: \"white\" }} variant=\"h5\">\r\n          {score[0]}:{score[1]}\r\n        </Typography>\r\n        {playAgain && !firstTime ? (\r\n          <Modal\r\n            open={open}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <PlayAgain oneMoreGame={oneMoreTimeGame} handleOpen={setOpen} />\r\n          </Modal>\r\n        ) : null}\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        spacing={5}\r\n        justify=\"center\"\r\n        style={{ backgroundColor: \"white\" }}\r\n      >\r\n        <Grid item>\r\n          <Grid container direction=\"column\" alignItems=\"center\">\r\n            <Typography variant=\"h4\">{playerName}</Typography>\r\n            <Field side={\"player\"} placeShipOnMap={placePlayerShipOnMap} />\r\n            {isBattle ? (\r\n              <React.Fragment>\r\n                <Grid item style={{ marginTop: 20 }}>\r\n                  <Grid container direction=\"row\" spacing={2} justify=\"center\">\r\n                    <Grid item>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        style={{ width: 70, height: 10 }}\r\n                        onChange={(event) =>\r\n                          setPlayerAttempt(event.target.value)\r\n                        }\r\n                        onKeyDown={(e) => {\r\n                          if (e.keyCode === 13)\r\n                            checkPlayerAttempt(playerAttempt);\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item style={{ marginTop: 10, marginBottom: 50 }}>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => checkPlayerAttempt(playerAttempt)}\r\n                      >\r\n                        Enter cell\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Typography\r\n                    style={{ marginTop: 20 }}\r\n                    variant=\"h6\"\r\n                  >{`Quantity of your attempts: ${player.attempts}`}</Typography>\r\n                </Grid>\r\n                <Grid item style={{ marginTop: 20 }}>\r\n                  {shipsCondition(player)}\r\n                </Grid>\r\n              </React.Fragment>\r\n            ) : null}\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={killPlayer}\r\n                style={{ marginTop: 20 }}\r\n              >\r\n                Kill player\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid container direction=\"column\" alignItems=\"center\">\r\n            <Typography variant=\"h4\">computer</Typography>\r\n            <Field\r\n              side={\"computer\"}\r\n              placeShipOnMap={() => console.log(\"vasya\")}\r\n            />\r\n            <Grid item style={{ marginTop: 100 }}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={killComputer}\r\n                style={{ marginTop: 20 }}\r\n              >\r\n                Kill computer\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ marginTop: 20 }}\r\n                onClick={setShowComputer}\r\n              >\r\n                {showComputer ? \"Hide Ships\" : \"Show Ships\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Typography\r\n            style={{ marginTop: 20 }}\r\n            variant=\"h6\"\r\n          >{`Quantity of computer attempts: ${computer.attempts}`}</Typography>\r\n          <Grid item>{shipsCondition(computer)}</Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  const {\r\n    player,\r\n    computer,\r\n    showComputer,\r\n    playAgain,\r\n    firstTime,\r\n    isBattle,\r\n    score,\r\n    playerName,\r\n    playerTurn,\r\n  } = state;\r\n  return {\r\n    player,\r\n    computer,\r\n    showComputer,\r\n    playAgain,\r\n    firstTime,\r\n    isBattle,\r\n    score,\r\n    playerName,\r\n    playerTurn,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  setShip: (player: string, ship: string, position: string[]) =>\r\n    dispatch(setShip(player, ship, position)),\r\n  setShipsCells: (player: string, cell: string) =>\r\n    dispatch(setShipsCells(player, cell)),\r\n  setShipsShadowsCells: (player: string, cell: string) =>\r\n    dispatch(setShipsShadowsCells(player, cell)),\r\n  setLegendLineTwo: (legend: string) => dispatch(setLegendLineTwo(legend)),\r\n  setLegendLineOne: (legend: string) => dispatch(setLegendLineOne(legend)),\r\n  setShowComputer: () => dispatch(setShowComputer()),\r\n  setShipsStatus: (player: string, ship: string, status: boolean) =>\r\n    dispatch(setShipsStatus(player, ship, status)),\r\n  setKilledCells: (player: string, cell: string) =>\r\n    dispatch(setKilledCells(player, cell)),\r\n  removeShipCell: (player: string, ship: string, cell: string) =>\r\n    dispatch(removeShipCell(player, ship, cell)),\r\n  setWrongAttempts: (player: string, attempt: string) =>\r\n    dispatch(setWrongAttempts(player, attempt)),\r\n  setPossibleDirections: (cell: string) =>\r\n    dispatch(setPossibleDirections(cell)),\r\n  removePossibleDirections: () => dispatch(removePossibleDirections()),\r\n  setAttempts: (player: string) => dispatch(setAttempts(player)),\r\n  setShipsCellsTotal: (obj: any) => dispatch(setShipsCellsTotal(obj)),\r\n  setShipsShadowsCellsTotal: (player: string, obj: any) =>\r\n    dispatch(setShipsShadowsCellsTotal(player, obj)),\r\n  removeShadows: () => dispatch(removeShadows()),\r\n  setPlayAgain: (status: boolean) => dispatch(setPlayAgain(status)),\r\n  setFirstTime: (status: boolean) => dispatch(setFirstTime(status)),\r\n  clearEverything: () => dispatch(clearEverything()),\r\n  setDamagedShip: (ship: string[]) => dispatch(setDamagedShip(ship)),\r\n  setIsBattle: (status: boolean) => dispatch(setIsBattle(status)),\r\n  setScore: (side: string) => dispatch(setScore(side)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Battle);\r\n","C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\PlayAgain.tsx",[],["73","74"],"C:\\Users\\BelyyBrat\\Desktop\\Projects\\battleship\\src\\Field.tsx",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":144,"column":6,"nodeType":"81","endLine":144,"endColumn":8,"suggestions":"82"},{"ruleId":"79","severity":1,"message":"83","line":149,"column":6,"nodeType":"81","endLine":149,"endColumn":25,"suggestions":"84"},{"ruleId":"79","severity":1,"message":"85","line":171,"column":6,"nodeType":"81","endLine":171,"endColumn":37,"suggestions":"86"},{"ruleId":"79","severity":1,"message":"87","line":184,"column":6,"nodeType":"81","endLine":184,"endColumn":39,"suggestions":"88"},{"ruleId":"79","severity":1,"message":"89","line":188,"column":6,"nodeType":"81","endLine":188,"endColumn":31,"suggestions":"90"},{"ruleId":"79","severity":1,"message":"91","line":197,"column":6,"nodeType":"81","endLine":197,"endColumn":33,"suggestions":"92"},{"ruleId":"75","replacedBy":"93"},{"ruleId":"77","replacedBy":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateComputerMap'. Either include it or remove the dependency array.","ArrayExpression",["97"],"React Hook useEffect has a missing dependency: 'drawPossibleDirections'. Either include it or remove the dependency array.",["98"],"React Hook useEffect has missing dependencies: 'player.attempts', 'removeShadows', 'setIsBattle', 'setLegendLineOne', 'setLegendLineTwo', 'setPlayAgain', and 'setScore'. Either include them or remove the dependency array.",["99"],"React Hook useEffect has missing dependencies: 'computer.attempts', 'setLegendLineOne', 'setLegendLineTwo', 'setPlayAgain', and 'setScore'. Either include them or remove the dependency array.",["100"],"React Hook useEffect has a missing dependency: 'setFirstTime'. Either include it or remove the dependency array.",["101"],"React Hook useEffect has missing dependencies: 'checkComputerAttempt' and 'firstRender'. Either include them or remove the dependency array.",["102"],["95"],["96"],"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [generateComputerMap]",{"range":"115","text":"116"},"Update the dependencies array to be: [drawPossibleDirections, player.shipsCells]",{"range":"117","text":"118"},"Update the dependencies array to be: [player.shipsStatus, firstTime, player.attempts, removeShadows, setIsBattle, setLegendLineOne, setLegendLineTwo, setPlayAgain, setScore]",{"range":"119","text":"120"},"Update the dependencies array to be: [computer.attempts, computer.shipsStatus, firstTime, setLegendLineOne, setLegendLineTwo, setPlayAgain, setScore]",{"range":"121","text":"122"},"Update the dependencies array to be: [player.ships.battleShip, setFirstTime]",{"range":"123","text":"124"},"Update the dependencies array to be: [checkComputerAttempt, firstRender, player.damagedShip.length]",{"range":"125","text":"126"},[3801,3803],"[generateComputerMap]",[3894,3913],"[drawPossibleDirections, player.shipsCells]",[4504,4535],"[player.shipsStatus, firstTime, player.attempts, removeShadows, setIsBattle, setLegendLineOne, setLegendLineTwo, setPlayAgain, setScore]",[4840,4873],"[computer.attempts, computer.shipsStatus, firstTime, setLegendLineOne, setLegendLineTwo, setPlayAgain, setScore]",[4973,4998],"[player.ships.battleShip, setFirstTime]",[5202,5229],"[checkComputerAttempt, firstRender, player.damagedShip.length]"]
>>>>>>> d0c240d9ee52597a5a07560c5bbc1f986c428ca3
